//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Input/ControllerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerAction"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""8a55b0b2-20d5-42c2-ad67-45b1d391ac85"",
            ""actions"": [
                {
                    ""name"": ""LStick"",
                    ""type"": ""Value"",
                    ""id"": ""3612da34-c741-442f-bb79-cd55e28d0783"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RStick"",
                    ""type"": ""Value"",
                    ""id"": ""1a0bea58-2c5d-4d19-b51e-bf385a2949f4"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""93df799f-2026-46ec-9950-010fb7960a42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""fe413b59-b497-4ef2-a13a-9be4827b6b1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad"",
                    ""type"": ""Value"",
                    ""id"": ""10eb60b0-19c1-4265-a54a-b66560b9cf59"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57ea0908-8e8d-4bb1-bcfc-0615c137522f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9c91fc8-850a-4aaa-99c6-9da01d514967"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c8371aa-ad3d-4409-96c1-a92ec13cbf87"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e0159cc-6285-4524-baa5-bfa15517a675"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de7f31d0-6358-4053-96fa-ae8ba957a775"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_LStick = m_PlayerControl.FindAction("LStick", throwIfNotFound: true);
        m_PlayerControl_RStick = m_PlayerControl.FindAction("RStick", throwIfNotFound: true);
        m_PlayerControl_LTrigger = m_PlayerControl.FindAction("LTrigger", throwIfNotFound: true);
        m_PlayerControl_RTrigger = m_PlayerControl.FindAction("RTrigger", throwIfNotFound: true);
        m_PlayerControl_Dpad = m_PlayerControl.FindAction("Dpad", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private List<IPlayerControlActions> m_PlayerControlActionsCallbackInterfaces = new List<IPlayerControlActions>();
    private readonly InputAction m_PlayerControl_LStick;
    private readonly InputAction m_PlayerControl_RStick;
    private readonly InputAction m_PlayerControl_LTrigger;
    private readonly InputAction m_PlayerControl_RTrigger;
    private readonly InputAction m_PlayerControl_Dpad;
    public struct PlayerControlActions
    {
        private @ControllerAction m_Wrapper;
        public PlayerControlActions(@ControllerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LStick => m_Wrapper.m_PlayerControl_LStick;
        public InputAction @RStick => m_Wrapper.m_PlayerControl_RStick;
        public InputAction @LTrigger => m_Wrapper.m_PlayerControl_LTrigger;
        public InputAction @RTrigger => m_Wrapper.m_PlayerControl_RTrigger;
        public InputAction @Dpad => m_Wrapper.m_PlayerControl_Dpad;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Add(instance);
            @LStick.started += instance.OnLStick;
            @LStick.performed += instance.OnLStick;
            @LStick.canceled += instance.OnLStick;
            @RStick.started += instance.OnRStick;
            @RStick.performed += instance.OnRStick;
            @RStick.canceled += instance.OnRStick;
            @LTrigger.started += instance.OnLTrigger;
            @LTrigger.performed += instance.OnLTrigger;
            @LTrigger.canceled += instance.OnLTrigger;
            @RTrigger.started += instance.OnRTrigger;
            @RTrigger.performed += instance.OnRTrigger;
            @RTrigger.canceled += instance.OnRTrigger;
            @Dpad.started += instance.OnDpad;
            @Dpad.performed += instance.OnDpad;
            @Dpad.canceled += instance.OnDpad;
        }

        private void UnregisterCallbacks(IPlayerControlActions instance)
        {
            @LStick.started -= instance.OnLStick;
            @LStick.performed -= instance.OnLStick;
            @LStick.canceled -= instance.OnLStick;
            @RStick.started -= instance.OnRStick;
            @RStick.performed -= instance.OnRStick;
            @RStick.canceled -= instance.OnRStick;
            @LTrigger.started -= instance.OnLTrigger;
            @LTrigger.performed -= instance.OnLTrigger;
            @LTrigger.canceled -= instance.OnLTrigger;
            @RTrigger.started -= instance.OnRTrigger;
            @RTrigger.performed -= instance.OnRTrigger;
            @RTrigger.canceled -= instance.OnRTrigger;
            @Dpad.started -= instance.OnDpad;
            @Dpad.performed -= instance.OnDpad;
            @Dpad.canceled -= instance.OnDpad;
        }

        public void RemoveCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);
    public interface IPlayerControlActions
    {
        void OnLStick(InputAction.CallbackContext context);
        void OnRStick(InputAction.CallbackContext context);
        void OnLTrigger(InputAction.CallbackContext context);
        void OnRTrigger(InputAction.CallbackContext context);
        void OnDpad(InputAction.CallbackContext context);
    }
}
